version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: golang_base_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: golang_base
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - golang_base_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d golang_base"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: golang_base_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - golang_base_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: golang_base_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      APP_ENV: production
      DATABASE_URL: postgres://user:password@postgres:5432/golang_base?sslmode=disable
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production-make-it-long-and-random
      ALLOWED_ORIGINS: "*"
      RATE_LIMIT: 100
      RATE_LIMIT_WINDOW: 1m
      SESSION_TIMEOUT: 24h
      BCRYPT_COST: 12
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - golang_base_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: golang_base_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - golang_base_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  golang_base_network:
    driver: bridge